# -*- coding: utf-8 -*-
"""CANCER _PREDICTION _MODEL (RANDOM FOREST CLASSIFIER).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JTUi-NN8SOj6FUsHPbE6hzlVLHLgP3z2
"""

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

"""Reading Data"""

data=pd.read_csv("/content/data (1).csv")
data

data['diagnosis'].value_counts()
data.diagnosis.M=1
data.diagnosis.B=0

data['diagnosis']

import warnings
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls

import plotly.io as pio
pio.renderers
import plotly.io as pio
pio.renderers.default = 'colab'

trace = go.Bar(x = (len(M), len(B)), y = ['malignant', 'benign'], orientation = 'h', opacity = 0.8, marker=dict(
        color=[ 'lightgreen', 'lightcoral'],
        line=dict(color='#000000',width=1.5)))

layout = dict(title =  'Count of diagnosis variable')
                    
fig = dict(data = [trace], layout=layout)
figure=py.iplot(fig)

from google.colab import drive
drive.mount('/content/drive')

trace = go.Pie(labels = ['benign','malignant'], values = data['diagnosis'].value_counts(), 
               textfont=dict(size=15), opacity = 0.8,
               marker=dict(colors=['lightgreen', 'blue'], 
                           line=dict(color='#000000', width=1.5)))


layout = dict(title =  'Distribution of diagnosis variable')
           
fig = dict(data = [trace], layout=layout)
py.iplot(fig)

data.head(5)

"""Cleaning Data (removing null values)"""

if data.columns.all()=="Unnamed: 32":
  print("NULL VALUES FOUND IS DELETED :")   
  data.drop(columns="Unnamed: 32",inplace=True)

data.isnull().sum()

data.head(8)

df=pd.DataFrame(data)
df

"""Converting data into Data Frame

Analysing Data

Statistical Analysing Data
"""

description=data.describe()
Description=pd.DataFrame(description)
print("satstsistical DEscription")
Description.T

"""collecting usefull Info from Data set"""

data.info()

RC=data.shape
print("No of Rows in Dataset",RC[0])
print("No of columns in Dataset,",RC[1])

"""Encoding Categorical value"""

from sklearn.preprocessing import LabelEncoder

LE=LabelEncoder()
df['diagnosis']=LE.fit_transform(df['diagnosis'])

"""Finding Correlation Between Features"""

correlation=df.corr()
print("corelation :",correlation)

"""PLOTTING CORELATION HEATMAP"""

plt.figure(figsize=(15,8))
sns.heatmap(correlation,cmap='Blues',annot=True,annot_kws={"size": 8})
plt.title("corelation Map",fontweight='bold',fontsize=20)
plt.show()

"""Defining dependent and Independent varriable"""

x=df.drop('diagnosis',axis=1)
y=df['diagnosis']

x.shape
print("In X Varriable no of Rows :",x.shape[0])
print("In X Varriable no of columns :",x.shape[1])

y.shape
print("In y Varriable no of Rows :",y.shape[0])

"""Trainning Data sets"""

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=0)
print(X_train.shape,Y_train.shape,X_test.shape,Y_test.shape)
X_train

"""Scaling Trainned Data"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler ()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

"""Applying Prediction Models

RANDOM FOREST
"""

from sklearn.ensemble import RandomForestClassifier

RF=RandomForestClassifier(n_estimators=60,criterion='entropy',random_state=0)

"""CONFUSION MATRAIX"""

RF.fit(X_train,Y_train)
RF_pred=RF.predict(X_test)
RF_cm=confusion_matrix(Y_test,RF_pred)
print("CONFUSION MATRIX",RF_cm)

"""PREDICTED DATA ACCURACY SCORE"""

RF_ac=accuracy_score(Y_test,RF_pred)
print("RANDOM FOREST MODEL ACCURACY :",RF_ac)

"""CLASSIFICATION REPORT """

RF_CR=classification_report(Y_test,RF_pred)
print("CLAssification REPORT :")
print(RF_CR)

from sklearn.tree import export_graphviz

estimator=RF.estimators_[5]

export_graphviz(estimator, out_file='tree.dot', 
                feature_names =x.columns,
                class_names = data['diagnosis'],
                rounded = True, proportion = False, 
                precision = 2, filled = True)

from subprocess import call
call(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])

from IPython.display import Image
Image(filename = 'tree.png')





